{"code":"import { asyncOra } from \"@electron-forge/async-ora\";\r\nimport path from \"path\";\r\nimport debug from \"debug\";\r\nimport { Storage } from \"@google-cloud/storage\";\r\nimport Publisher from \"@electron-forge/publisher-base\";\r\nconst d = debug(\"electron-forge:publish:gcs\");\r\nexport default class PublisherGCS extends Publisher {\r\n    name = \"gcs\";\r\n    async publish({ makeResults }) {\r\n        const { config } = this;\r\n        const artifacts = [];\r\n        for (const makeResult of makeResults) {\r\n            artifacts.push(...makeResult.artifacts.map((artifact) => ({\r\n                path: artifact,\r\n                keyPrefix: config.folder || makeResult.packageJSON.version,\r\n                platform: makeResult.platform,\r\n                arch: makeResult.arch,\r\n            })));\r\n        }\r\n        const clientEmail = config.clientEmail || process.env.GOOGLE_CLOUD_CLIENT_EMAIL;\r\n        const privateKey = config.privateKey || process.env.GOOGLE_CLOUD_PRIVATE_KEY;\r\n        let credentials;\r\n        if (clientEmail && privateKey) {\r\n            credentials = {\r\n                client_email: clientEmail,\r\n                private_key: privateKey,\r\n            };\r\n        }\r\n        const storage = new Storage({\r\n            keyFilename: config.projectId || process.env.GOOGLE_APPLICATION_CREDENTIALS,\r\n            credentials,\r\n            projectId: config.projectId || process.env.GOOGLE_CLOUD_PROJECT,\r\n        });\r\n        if (!config.bucket) {\r\n            throw new Error('In order to publish to Google Cloud Storage you must set the \"gcs.bucket\" property in your Forge config.');\r\n        }\r\n        const bucket = storage.bucket(config.bucket);\r\n        d(\"creating Google Cloud Storage client with options:\", config);\r\n        let uploaded = 0;\r\n        const spinnerText = () => `Uploading Artifacts ${uploaded}/${artifacts.length}`;\r\n        await asyncOra(spinnerText(), async (uploadSpinner) => {\r\n            await Promise.all(artifacts.map(async (artifact) => {\r\n                d(\"uploading:\", artifact.path);\r\n                await bucket.upload(artifact.path, {\r\n                    gzip: true,\r\n                    destination: this.keyForArtifact(artifact),\r\n                    public: config.public,\r\n                });\r\n                uploaded += 1;\r\n                uploadSpinner.text = spinnerText();\r\n            }));\r\n        });\r\n    }\r\n    keyForArtifact(artifact) {\r\n        if (this.config.keyResolver) {\r\n            return this.config.keyResolver(path.basename(artifact.path), artifact.platform, artifact.arch);\r\n        }\r\n        return `${artifact.keyPrefix}/${path.basename(artifact.path)}`;\r\n    }\r\n}\r\n//# sourceMappingURL=publisher.js.map","references":["C:/Users/14169/gcs-publisher/node_modules/@electron-forge/async-ora/dist/index.d.ts","C:/Users/14169/gcs-publisher/node_modules/debug/src/index.js","C:/Users/14169/gcs-publisher/node_modules/@google-cloud/storage/build/src/index.d.ts","C:/Users/14169/gcs-publisher/src/config.ts","C:/Users/14169/gcs-publisher/node_modules/@electron-forge/publisher-base/dist/Publisher.d.ts"],"map":"{\"version\":3,\"file\":\"publisher.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/publisher.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Users/14169/gcs-publisher/dist/publisher.d.ts","writeByteOrderMark":false,"text":"import { PublisherGCSConfig } from \"./config\";\r\nimport Publisher, { PublisherOptions } from \"@electron-forge/publisher-base\";\r\ndeclare type GCSArtifact = {\r\n    path: string;\r\n    keyPrefix: string;\r\n    platform: string;\r\n    arch: string;\r\n};\r\nexport default class PublisherGCS extends Publisher<PublisherGCSConfig> {\r\n    name: string;\r\n    publish({ makeResults }: PublisherOptions): Promise<void>;\r\n    keyForArtifact(artifact: GCSArtifact): string;\r\n}\r\nexport {};\r\n"}}
